type Query {
  links: [Link!]!
  getUsers: [User!]!
  getUser(id: ID!): User
  getRisks: [Risk!]!
  getRisk(id: ID!): Risk!
  getDefenseProfile(id: ID!): DefenseProfile!
  getDefenseProfiles: [DefenseProfile!]!
}

type AuthPayload {
  token: String
  user: User
}

type Mutation {
  # link
  postLink(url: String!, description: String!): Link!
  editLink(id: ID!, url: String!, description: String!): Link!
  deleteLink(id: ID!): Link!
  # risk
  postRisk(name: String!, value: Int!): Risk!
  editRisk(id: ID!, name: String!, value: Int!): Risk!
  deleteRisk(id: ID!): Risk!
  # user login
  signup(email: String!, password: String!, name: String!, role:String): AuthPayload
  login(email: String!, password: String!): AuthPayload
  deleteUser(id: ID!): User!
  # defense profile
  postDefenseProfile(name: String!, level: String!): DefenseProfile!
  editDefenseProfile(id: ID!, name: String!, level: String!): DefenseProfile!
  deleteDefenseProfile(id: ID!): DefenseProfile!
  
}

type User {
  id: ID!
  name: String!
  email: String!
  role: String!
  links: [Link!]!
  risk: [Risk!]!
  DefenseProfile: [DefenseProfile!]!
}

type DefenseProfile {
  id: ID!
  name: String!
  level: String!
  postedBy: User
}

type Risk {
  id: ID!
  name: String!
  value: Int!
  postedBy: User
}

type Link {
  id: ID!
  description: String!
  url: String!
  postedBy: User
}